Metadata-Version: 2.1
Name: pyqin
Version: 0.1.0
Summary: A client package to interact with the Qin websocket.
Author-email: Your Name <your.email@example.com>
License: MIT
Project-URL: Homepage, https://github.com/yourusername/ws_audio_client
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: websockets>=10.0
Requires-Dist: pyaudio>=0.2.11
Requires-Dist: numpy>=1.18.5
Requires-Dist: requests>=2.25.1
Requires-Dist: aiohttp
Requires-Dist: asyncio
Requires-Dist: pydantic

# ws_audio_client

A Python client package to interact seamlessly with a websocket audio processing server. This package handles authentication, configuration, audio streaming, and receiving processed audio data, making it easy to integrate with the server's API.

## Features

- **Easy Authentication**: Simplify the process of connecting and authenticating with the server.
- **Dynamic Configuration**: Update session parameters like language, voice ID, and speed on the fly.
- **Audio Streaming**: Stream audio from various sources (microphone, URL, or file) to the server.
- **Receive Processed Audio**: Receive and handle processed audio data from the server with customizable callbacks.
- **Asynchronous Design**: Built using `asyncio` for efficient IO-bound operations.

## Installation

```bash
pip install pyqin
```

Alternatively, clone the repository and install locally:

```bash
git clone https://github.com/Paul-HenriBJT/qin-public.git
cd pyquin
pip install .
```

## Requirements

- Python 3.6 or higher
- See requirements.txt for package dependencies.

## Usage

### Basic Example

```bash
import asyncio
from ws_audio_client.client import WebsocketAudioClient
from ws_audio_client.audio_streams import microphone_audio_stream
import pyaudio
import numpy as np

def play_audio(audio_chunk):
    # Set up PyAudio
    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paFloat32,
                    channels=1,
                    rate=44100,
                    output=True)

    # Convert bytes to numpy array
    audio_data = np.frombuffer(audio_chunk, dtype=np.float32)

    # Play audio
    stream.write(audio_data.tobytes())

    # Close stream
    stream.stop_stream()
    stream.close()
    p.terminate()

async def main():
    API_KEY = "YOUR_API_KEY"
    WS_URL = "ws://localhost:8000/ws"

    client = WebsocketAudioClient(
        api_key=API_KEY,
        ws_url=WS_URL,
        language="en-US",
        voice_id="your_voice_id",
        speed="normal",
        on_audio_received=play_audio
    )

    await client.connect()

    # Stream audio from the microphone
    audio_generator = microphone_audio_stream()

    # Start streaming audio
    await client.stream_audio(audio_generator)

if __name__ == "__main__":
    asyncio.run(main())
```

## Examples

Additional examples are available in the /examples directory:

- Stream Audio from Microphone
- Stream Audio from URL
- Stream Audio from Audio File
